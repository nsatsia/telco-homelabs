---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: hook-succeeded
  name: ztp-{{ .Values.name }}-wait-job
  namespace: telco-gitops
spec:
  template:
    spec:
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: cli-job-sa
      serviceAccountName: cli-job-sa
      terminationGracePeriodSeconds: 30
      containers:
        - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8:v1.2.0
          imagePullPolicy: IfNotPresent
          name: ztp-{{ .Values.name }}-wait-argocd
          env:
            - name: SLEEP
              value: "3"
          command:
            - /bin/bash
            - -c
            - |
              echo "Helm PreInstall Hook to wait for target cluster definition in ArgoCD"
              URL_READY="Pausing $SLEEP seconds..."
              while [ "$URL_READY" != "https" ]; do
                echo "Waiting for the AI status URL to be ready. ($URL_READY)"
                sleep $SLEEP
                URL=$(oc -n {{ .Values.namespace }} get agentclusterinstalls.extensions.hive.openshift.io aci-{{ .Values.name }} -o=jsonpath="{.status.debugInfo.eventsURL}")
                URL_READY=$(echo $URL | awk -F ":" '{print $1}')
              done
              INSTALL_STATUS="Waiting for install to complete"
              echo -n "Waiting for the cluster to complete installation."
              while [ "$INSTALL_STATUS" != "Successfully finished installing cluster" ]; do
                sleep $SLEEP
                INSTALL_STATUS=$( curl -s -k $URL | awk -F '"' '{print $(NF-5)}' )
                echo -n "."
              done
              echo "Completed!"
              ARGOPW=$(oc get secret -n telco-gitops telco-gitops-cluster -o go-template='{{ "{{" }}index .data "admin.password"{{ "}}" }}' | base64 -d)
              argocd --username=admin --password=$ARGOPW --insecure --config /tmp/config login telco-gitops-server-telco-gitops.apps.ocpsmc.lab.diktio.net
              DEFINED_STATUS="Waiting!"
              echo -n "Waiting for cluster to be defined in ArgoCD."
              while ! `argocd cluster list --config /tmp/config | egrep -q api.{{ .Values.name }}.{{ .Values.domain }}`; do
                echo -n "."
                sleep $SLEEP
              done 
              echo "Defined!"
              argocd logout --config /tmp/config admin
              rm -f /tmp/kubeconfig /tmp/config 
              echo "All done! Hooray!"
              sleep $SLEEP
